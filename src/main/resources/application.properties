# ===================================================================
#                      APPLICATION INFORMATION
# ===================================================================
spring.application.name=flutterbackend
# Port akan diambil dari environment variable PORT yang diberikan oleh Render.
# Jika berjalan lokal tanpa env var PORT, akan memakai port 8080.
server.port=${PORT}

# ===================================================================
#                     DATABASE CONFIGURATION (AMAN)
# ===================================================================
# Kredensial database diambil dari Environment Variables di Render untuk keamanan.
# JANGAN PERNAH MENULIS LANGSUNG KREDENSIAL DI FILE INI.
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}

# ===================================================================
#                  JPA / HIBERNATE CONFIGURATION (PRODUKSI)
# ===================================================================
# 'validate' akan memeriksa jika skema tabel cocok dengan entitas, lebih aman daripada 'update'.
spring.jpa.hibernate.ddl-auto=validate
# Matikan show-sql di produksi untuk performa dan kebersihan log.
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.properties.hibernate.format_sql=false

# ===================================================================
#                      LOGGING CONFIGURATION
# ===================================================================
# Gunakan level INFO untuk produksi agar log tidak terlalu ramai (verbose).
logging.level.root=INFO
logging.level.org.springframework.web=INFO
logging.level.org.hibernate=WARN

# ===================================================================
#                   SECURITY & JWT CONFIGURATION
# ===================================================================
# Rahasia JWT diambil dari Environment Variable, ini sudah benar.
jwt.secret=${JWT_SECRET}
# 24 jam dalam milidetik
jwt.expiration=86400000

# Pengaturan error yang lebih aman untuk produksi.
# Stack trace hanya akan muncul jika ada parameter ?trace=true di request.
server.error.include-stacktrace=on_param
server.error.include-message=always
server.error.include-binding-errors=always

# ===================================================================
#                     FILE UPLOAD CONFIGURATION
# ===================================================================
# PENTING: Penyimpanan file lokal tidak akan berfungsi dengan andal di Render
# karena sistem filenya bersifat sementara (ephemeral) dan akan dihapus saat restart.
# Baris di bawah ini sengaja dikomentari. Solusi yang benar adalah mengubah kode
# untuk meng-upload file ke layanan cloud storage seperti Cloudinary atau AWS S3.
# file.upload-dir=uploads

spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# ===================================================================
#                    STANDARD CONFIGURATIONS
# ===================================================================
# Jackson configuration
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.serialization.fail-on-empty-beans=false
spring.jackson.deserialization.fail-on-unknown-properties=false

# HTTP encoding
server.servlet.encoding.charset=UTF-8
server.servlet.encoding.enabled=true
server.servlet.encoding.force=true

app.base-url=https://flutterbackend-production-f09b.up.railway.app